/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example

import kotlin.test.Test
import kotlin.test.assertContains
import kotlin.test.assertTrue
import org.example.models.EvaluationResult
import org.example.models.LeaveOnDoor
import org.example.models.RuleFailureReason.ShipmentIsAlreadyDelivered
import org.example.models.shipment.AdditionalService.EXPRESS_DELIVERY
import org.example.models.shipment.Event
import org.example.models.shipment.EventType.DELIVERED
import org.example.models.shipment.Shipment
import org.example.models.shipment.ShipmentType.DOMESTIC_C2C
import org.junit.jupiter.api.Assertions.assertFalse

internal class LeaveOnDoorTest {
  @Test
  fun `it should allow LeaveOnDoor when everything is in order`() {

    val result: EvaluationResult = RuleService.evaluate(shipmentValidForLeaveOnDoor)

    assertTrue(result.disallowedActions.isEmpty())
    assertContains(result.allowedActions, LeaveOnDoor)
  }

  @Test
  fun `it should not allow LeaveOnDoor if shipment is already delivered`() {
    val shipment =
      shipmentValidForLeaveOnDoor.copy(events = listOf(Event(code = "D1", type = DELIVERED)))
    val result: EvaluationResult = RuleService.evaluate(shipment)

    assertFalse(result.allowedActions.contains(LeaveOnDoor))
    assertTrue(result.disallowedActions.containsKey(LeaveOnDoor))
    assertTrue(result.disallowedActions[LeaveOnDoor]?.contains(ShipmentIsAlreadyDelivered) == true)
  }

  companion object {
    val shipmentValidForLeaveOnDoor =
      Shipment(
        id = "123",
        shipmentType = DOMESTIC_C2C,
        payedForServices = listOf(EXPRESS_DELIVERY),
        events = emptyList(),
      )
  }
}
